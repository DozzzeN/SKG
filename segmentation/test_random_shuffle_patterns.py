import itertools
from collections import Counter

import numpy as np
import scipy.stats

from segmentation.methods import normal2uniform, smooth, find_sub_opt_segment_method_sliding_threshold, \
    find_sub_opt_segment_method_sliding, find_sub_opt_shuffle_method_sliding_threshold, \
    find_sub_opt_shuffle_method_sliding, find_sub_opt_shuffle_method_sliding_threshold_random, \
    find_sub_opt_shuffle_method_sliding_threshold_even

np.random.seed(100000)
CSIa1Orig = np.random.normal(0, 1, 100000)

segLen = 4
segNum = 4

# 1W数据 设阈值
# 4 8 16 32 64 128 256 512
# withIndexValue = True
# ({'0123': 1645, '0132': 330, '0213': 180, '0312': 83, '0231': 55, '1023': 37, '1203': 37, '2013': 16, '1230': 16, '1032': 15, '0321': 14, '2301': 12, '2031': 9, '2103': 9, '1302': 8, '2130': 7, '1320': 5, '3102': 5, '3012': 5, '2310': 4, '3021': 4, '3210': 4, '3120': 3, '3201': 1})
# ({'0123': 1758, '1023': 169, '0213': 121, '0132': 117, '1302': 45, '3012': 42, '0312': 37, '1032': 37, '0231': 37, '0321': 20, '1203': 18, '1320': 15, '3021': 13, '2031': 13, '3201': 12, '2301': 10, '2013': 9, '1230': 8, '3210': 6, '3102': 6, '2103': 5, '2310': 5, '2130': 5, '3120': 4})
# ({'0123': 2186, '0132': 55, '0213': 52, '1023': 45, '0312': 25, '0231': 24, '1203': 23, '1230': 18, '0321': 12, '1320': 11, '2013': 10, '1032': 10, '3012': 9, '3102': 7, '1302': 6, '2310': 4, '2031': 4, '3021': 3, '2130': 2, '2103': 2, '2301': 2, '3201': 1, '3120': 1})
# ({'0123': 2392, '0213': 18, '0132': 17, '1023': 13, '0312': 10, '0231': 6, '2013': 6, '1203': 6, '1230': 5, '1032': 4, '3012': 3, '2130': 3, '1302': 3, '0321': 3, '3120': 2, '2031': 2, '2310': 1, '3021': 1, '2103': 1})
# ({'0123': 2450, '0132': 15, '0231': 8, '1023': 7, '1203': 3, '0312': 3, '2130': 2, '2031': 2, '1302': 1, '0213': 1, '3120': 1, '3012': 1, '3201': 1, '2013': 1})
# ({'0123': 2418, '0132': 6, '2013': 3, '1023': 2, '0213': 1, '1032': 1, '1302': 1})
# ({'0123': 2293, '0132': 3, '0213': 3, '0231': 2, '3012': 1, '2013': 1, '1023': 1})
# ({'0123': 2044, '3012': 1, '1023': 1, '0132': 1, '3021': 1})

# 1W数据 设阈值 第一个分段随机 置换类型随机(find_sub_opt_shuffle_method_sliding_threshold_random)
# 4 8 16 32 64 128 256 512
# withIndexValue = True
# ({'3201': 264, '3102': 205, '0231': 196, '3120': 193, '2013': 181, '0123': 149, '2301': 119, '3021': 118, '1302': 117, '0132': 112, '1230': 104, '2130': 93, '0312': 76, '2103': 73, '0321': 69, '1203': 66, '2031': 56, '1032': 49, '0213': 48, '3210': 47, '1320': 46, '1023': 45, '3012': 42, '2310': 36})
# ({'0132': 489, '0123': 467, '3102': 231, '0312': 177, '3201': 159, '3120': 147, '2103': 126, '2130': 95, '2013': 69, '2310': 68, '2031': 64, '3210': 60, '2301': 59, '1320': 42, '1023': 40, '0213': 38, '1203': 34, '0231': 34, '3012': 28, '1032': 23, '0321': 21, '3021': 16, '1230': 14, '1302': 11})
# ({'0132': 638, '0123': 617, '0312': 323, '3102': 299, '3201': 103, '2310': 84, '2103': 59, '0231': 42, '3012': 41, '1023': 39, '2013': 33, '0321': 32, '3120': 29, '1203': 23, '2031': 22, '2130': 21, '1302': 20, '1032': 17, '1230': 14, '3021': 13, '0213': 12, '1320': 11, '2301': 10, '3210': 10})
# ({'0132': 810, '0123': 794, '0312': 306, '3102': 292, '2103': 46, '3201': 36, '2310': 35, '2013': 21, '3120': 18, '1032': 14, '0231': 14, '2301': 13, '3021': 13, '0213': 12, '1023': 11, '3210': 11, '2130': 11, '2031': 8, '1320': 7, '3012': 7, '0321': 6, '1302': 4, '1203': 4, '1230': 3})
# ({'0132': 878, '0123': 851, '3102': 316, '0312': 298, '2103': 31, '2310': 27, '3201': 18, '3120': 14, '1203': 6, '0321': 6, '1320': 6, '2013': 6, '2031': 5, '2130': 5, '1302': 5, '0213': 4, '1023': 4, '2301': 4, '1230': 3, '3210': 3, '0231': 3, '3021': 1, '1032': 1, '3012': 1})
# ({'0123': 886, '0132': 822, '0312': 327, '3102': 307, '2310': 28, '2103': 22, '3201': 6, '2013': 6, '0213': 5, '2130': 4, '3120': 3, '3012': 3, '0321': 2, '0231': 2, '1230': 2, '1032': 1, '1302': 1, '1320': 1, '2031': 1, '3210': 1, '2301': 1, '1203': 1})
# ({'0132': 867, '0123': 864, '3102': 258, '0312': 252, '2310': 26, '2103': 19, '3201': 5, '2130': 4, '0231': 3, '2301': 2, '2013': 1, '1203': 1, '1023': 1, '3120': 1})
# ({'0132': 755, '0123': 754, '0312': 272, '3102': 235, '2310': 13, '2103': 11, '3012': 2, '3201': 2, '3120': 1, '2130': 1, '1320': 1, '1023': 1})]

# 10W数据 设阈值 第一个分段随机 置换类型随机(find_sub_opt_shuffle_method_sliding_threshold_random)
# 4 8 16 32 64 128 256 512
# withIndexValue = True
# ({'3201': 2620, '3102': 2148, '3120': 1981, '0231': 1904, '2013': 1815, '0123': 1373, '2301': 1282, '0132': 1275, '1230': 1257, '1302': 1211, '3021': 1010, '2130': 834, '1203': 685, '0321': 664, '2031': 642, '3210': 612, '2103': 600, '0312': 560, '1320': 478, '2310': 441, '3012': 426, '1023': 402, '0213': 401, '1032': 383})
# ({'0123': 4916, '0132': 4619, '3102': 2370, '0312': 2068, '3201': 1712, '3120': 1172, '2130': 1014, '2103': 985, '2310': 797, '2031': 585, '2013': 550, '3210': 523, '2301': 461, '0213': 461, '1023': 419, '1203': 377, '1320': 370, '1032': 290, '0231': 270, '0321': 266, '3012': 243, '1302': 216, '1230': 171, '3021': 153})
# ({'0132': 6287, '0123': 6134, '0312': 3065, '3102': 3059, '3201': 938, '2310': 857, '2103': 703, '0231': 383, '2013': 360, '3120': 359, '3012': 344, '1023': 339, '1203': 310, '0321': 302, '2130': 251, '2031': 239, '1032': 173, '3210': 168, '1230': 138, '1302': 128, '0213': 122, '3021': 118, '2301': 116, '1320': 115})
# ({'0132': 8081, '0123': 7892, '3102': 3109, '0312': 3096, '2310': 413, '2103': 405, '3201': 307, '3120': 167, '2013': 153, '2130': 149, '0213': 130, '1032': 110, '3012': 109, '1023': 108, '1320': 104, '0231': 97, '3021': 96, '1203': 85, '2031': 78, '1302': 76, '3210': 75, '0321': 73, '2301': 63, '1230': 48})
# ({'0132': 8612, '0123': 8610, '3102': 3268, '0312': 2924, '2310': 368, '2103': 321, '3201': 156, '3120': 102, '2013': 72, '0321': 66, '2130': 60, '0231': 59, '0213': 48, '3012': 43, '2301': 41, '1203': 41, '1032': 38, '2031': 37, '1230': 35, '3021': 35, '3210': 29, '1320': 23, '1023': 19, '1302': 17})
# ({'0123': 8950, '0132': 8577, '0312': 3329, '3102': 3095, '2103': 324, '2310': 272, '3201': 64, '2013': 46, '0231': 27, '3120': 24, '3210': 24, '1032': 22, '1203': 22, '2031': 19, '1023': 19, '3021': 19, '1302': 18, '2130': 18, '0213': 17, '0321': 17, '1230': 17, '2301': 16, '1320': 13, '3012': 11})
# ({'0123': 9180, '0132': 9052, '0312': 3065, '3102': 2813, '2310': 273, '2103': 250, '3201': 30, '3120': 22, '2130': 18, '2013': 17, '2301': 15, '0231': 12, '0213': 11, '1230': 11, '1302': 10, '1032': 9, '3012': 7, '1320': 7, '1023': 7, '1203': 6, '3210': 5, '0321': 5, '2031': 4, '3021': 3})
# ({'0123': 9159, '0132': 8999, '0312': 2977, '3102': 2939, '2310': 215, '2103': 213, '3120': 11, '3201': 9, '1302': 5, '1230': 5, '2130': 5, '1203': 4, '2031': 4, '1032': 4, '3210': 4, '0321': 4, '3012': 4, '0231': 3, '2013': 3, '1320': 3, '0213': 3, '2301': 1, '1023': 1, '3021': 1})]

# 1W数据 设阈值 第一个分段随机 置换类型均匀随机选择(find_sub_opt_shuffle_method_sliding_threshold_even)
# 4 8 16 32 64 128 256 512
# withIndexValue = True
# ({'2310': 105, '3201': 105, '2130': 105, '1203': 105, '3210': 105, '2031': 105, '2103': 105, '3021': 105, '1230': 104, '0321': 104, '2013': 104, '0132': 104, '3102': 104, '0231': 104, '3012': 104, '1302': 104, '0123': 104, '2301': 104, '0213': 104, '0312': 104, '3120': 104, '1032': 104, '1023': 104, '1320': 104})
# ({'2310': 106, '3201': 106, '0132': 106, '1023': 106, '1032': 106, '3210': 106, '3102': 106, '1302': 106, '0321': 105, '1203': 105, '2103': 105, '1230': 105, '3021': 104, '0231': 104, '0213': 104, '2130': 104, '3012': 104, '2301': 104, '2031': 104, '2013': 104, '3120': 103, '1320': 103, '0312': 103, '0123': 103})
# ({'1203': 111, '2310': 110, '0213': 110, '2130': 110, '2103': 109, '2301': 108, '3210': 108, '3021': 108, '0132': 106, '1320': 105, '3102': 104, '2013': 104, '0123': 104, '3120': 104, '1230': 103, '0321': 103, '3201': 102, '1032': 102, '0231': 102, '2031': 101, '0312': 101, '3012': 99, '1023': 99, '1302': 99})
# ({'1032': 119, '1230': 118, '2130': 118, '3012': 118, '3210': 118, '2301': 117, '3201': 116, '0123': 115, '3120': 114, '0213': 102, '2310': 101, '0231': 99, '0312': 99, '0321': 98, '2103': 97, '3102': 97, '3021': 95, '2031': 95, '1302': 95, '0132': 94, '1203': 94, '1320': 93, '2013': 92, '1023': 92})
# ({'3102': 126, '1032': 126, '0123': 126, '0321': 125, '1230': 125, '3021': 125, '1302': 125, '1023': 124, '0312': 124, '1320': 124, '2031': 123, '3210': 123, '2301': 123, '2013': 123, '0231': 121, '2310': 104, '3120': 70, '2103': 67, '0213': 66, '1203': 66, '2130': 65, '0132': 65, '3012': 65, '3201': 65})
# ({'2031': 251, '0213': 251, '2310': 145, '0231': 130, '0132': 129, '1023': 128, '3102': 128, '1302': 128, '1203': 128, '3021': 128, '3201': 127, '1230': 127, '2130': 127, '0123': 127, '1320': 127, '3210': 126, '2013': 125})
# ({'2310': 256, '2103': 256, '0132': 255, '0321': 255, '2301': 254, '1023': 254, '2031': 254, '3210': 253, '3012': 253, '3201': 10, '0312': 2, '0231': 2})
# ({'2310': 512, '3120': 511, '0321': 509, '1032': 509, '3201': 3, '0231': 2, '1023': 2})

# 10W数据 设阈值 第一个分段随机 置换类型均匀随机选择(find_sub_opt_shuffle_method_sliding_threshold_even)
# 4 8 16 32 64 128 256 512
# withIndexValue = True
# ({'2310': 1042, '1230': 1042, '2013': 1042, '3201': 1042, '3021': 1042, '3210': 1042, '0132': 1042, '3102': 1042, '0231': 1042, '3012': 1042, '1203': 1042, '2130': 1042, '0123': 1042, '1302': 1042, '2103': 1042, '1320': 1042, '3120': 1042, '0213': 1042, '2301': 1042, '2031': 1042, '0321': 1041, '1032': 1041, '0312': 1041, '1023': 1041})
# ({'2310': 1042, '1302': 1042, '0123': 1042, '2031': 1042, '3201': 1042, '1023': 1042, '2103': 1042, '2130': 1042, '3102': 1042, '2013': 1042, '1203': 1042, '0213': 1042, '0321': 1042, '3021': 1042, '3120': 1042, '0132': 1042, '3210': 1042, '0231': 1042, '0312': 1042, '3012': 1042, '1032': 1042, '2301': 1042, '1320': 1042, '1230': 1042})
# ({'2310': 1042, '0213': 1042, '0321': 1042, '2130': 1042, '3201': 1042, '2103': 1042, '0123': 1042, '0231': 1042, '3102': 1042, '3012': 1042, '2031': 1042, '1302': 1042, '3120': 1042, '2301': 1042, '3021': 1042, '2013': 1042, '3210': 1042, '1032': 1042, '0132': 1042, '1023': 1042, '1203': 1042, '1320': 1042, '0312': 1042, '1230': 1042})
# ({'3201': 1043, '3102': 1043, '0132': 1043, '2301': 1043, '3021': 1043, '0213': 1043, '0231': 1043, '0123': 1043, '0321': 1043, '3012': 1043, '2103': 1043, '2130': 1043, '2031': 1043, '1203': 1043, '1320': 1043, '1032': 1043, '2310': 1042, '2013': 1042, '0312': 1042, '1023': 1042, '1302': 1042, '3210': 1042, '1230': 1042, '3120': 1042})
# ({'2310': 1043, '1302': 1043, '3210': 1043, '3201': 1043, '3120': 1043, '1032': 1043, '2031': 1043, '3021': 1043, '3012': 1043, '3102': 1043, '2013': 1043, '0123': 1043, '1023': 1043, '2103': 1043, '0321': 1043, '2301': 1043, '2130': 1042, '1203': 1042, '0312': 1042, '1230': 1042, '0132': 1042, '1320': 1042, '0213': 1042, '0231': 1042})
# ({'2310': 1040, '1320': 1040, '3102': 1040, '2130': 1040, '0312': 1040, '3201': 1040, '0132': 1040, '1230': 1040, '0123': 1040, '3210': 1040, '1032': 1040, '1203': 1040, '2301': 1040, '3120': 1040, '3021': 1040, '0321': 1040, '1023': 1040, '0231': 1040, '1302': 1040, '2103': 1040, '2013': 1040, '3012': 1040, '2031': 1040, '0213': 1040})
# ({'2310': 1035, '0231': 1035, '3201': 1035, '0312': 1035, '0123': 1035, '2130': 1035, '0321': 1035, '3102': 1035, '2301': 1035, '3012': 1035, '1032': 1035, '2013': 1035, '1230': 1035, '0213': 1035, '2031': 1035, '3120': 1035, '1302': 1034, '1023': 1034, '3210': 1034, '2103': 1034, '1320': 1034, '3021': 1034, '0132': 1034, '1203': 1034})
# ({'2310': 1024, '1203': 1024, '3201': 1024, '3210': 1024, '3102': 1024, '0231': 1024, '0132': 1024, '3012': 1024, '0123': 1024, '1302': 1024, '0312': 1024, '2013': 1024, '2103': 1024, '0213': 1024, '2031': 1024, '3120': 1024, '2301': 1024, '1230': 1024, '0321': 1024, '1023': 1024, '1320': 1024, '1032': 1024, '2130': 1024, '3021': 1024})]

# 1W数据 不设阈值(第一个分段选择0123)
# 4 8 16 32 64 128 256 512
# withIndexValue = True
# ({'0123': 696, '1203': 128, '3210': 121, '1320': 116, '0213': 112, '1230': 100, '1023': 92, '0231': 91, '3201': 84, '2130': 83, '0312': 74, '0321': 72, '1302': 70, '3102': 69, '2103': 68, '0132': 63, '3021': 63, '2310': 63, '3012': 63, '1032': 60, '3120': 60, '2301': 59, '2013': 52, '2031': 45})
# ({'0123': 381, '1032': 147, '3012': 147, '1320': 124, '3201': 117, '3021': 116, '0231': 113, '0213': 96, '1230': 96, '0312': 94, '2301': 89, '2103': 89, '0132': 84, '1203': 83, '3210': 83, '1023': 83, '3120': 81, '3102': 78, '2013': 78, '2130': 76, '1302': 69, '2310': 66, '2031': 65, '0321': 57})
# ({'0123': 244, '2013': 124, '1032': 110, '3012': 108, '3102': 108, '3120': 107, '3201': 106, '0213': 105, '0231': 105, '3021': 101, '1230': 101, '2103': 101, '0321': 97, '3210': 97, '1203': 94, '1320': 93, '2310': 92, '2130': 92, '0132': 90, '0312': 90, '1023': 89, '2301': 88, '1302': 87, '2031': 83})
# ({'0123': 187, '2013': 115, '1032': 114, '1203': 114, '0132': 113, '3012': 110, '3210': 110, '1320': 110, '0231': 105, '3120': 100, '1023': 100, '3102': 100, '1302': 100, '3201': 99, '3021': 99, '2301': 98, '1230': 98, '2031': 95, '0213': 93, '0312': 93, '2130': 89, '0321': 89, '2103': 85, '2310': 80})
# ({'0123': 140, '0132': 123, '2013': 114, '1230': 111, '3021': 111, '0321': 110, '0213': 109, '1203': 108, '2103': 106, '2130': 105, '2031': 104, '0312': 103, '3102': 102, '3012': 101, '3201': 100, '2301': 100, '3120': 98, '0231': 98, '1023': 97, '3210': 97, '1032': 91, '1320': 90, '1302': 90, '2310': 88})
# ({'2301': 121, '0123': 116, '2031': 115, '3201': 113, '0312': 113, '0321': 112, '1230': 109, '3120': 107, '0231': 106, '1203': 104, '3210': 101, '1032': 100, '0213': 100, '1023': 100, '2013': 99, '2103': 98, '0132': 96, '2310': 95, '3012': 94, '3021': 93, '1302': 90, '1320': 89, '2130': 83, '3102': 78})
# ({'3201': 121, '0321': 107, '3021': 105, '1230': 103, '3120': 103, '0123': 102, '0132': 102, '1032': 101, '2130': 100, '0231': 100, '1203': 99, '1023': 99, '3102': 97, '2310': 95, '1302': 94, '2031': 93, '2013': 92, '3210': 91, '3012': 88, '0213': 87, '0312': 87, '2301': 82, '2103': 78, '1320': 78})
# ({'3012': 106, '2130': 102, '0213': 97, '3210': 95, '0321': 95, '2031': 95, '3201': 89, '1203': 89, '0312': 85, '1230': 85, '2310': 85, '2301': 84, '0123': 83, '1032': 83, '3021': 83, '0231': 82, '2103': 81, '1023': 80, '3102': 79, '1302': 78, '3120': 78, '0132': 75, '2013': 73, '1320': 66})

# 1W数据 不设阈值(第一个分段随机选择)
# 4 8 16 32 64 128 256 512
# withIndexValue = True
# ({'0231': 203, '1302': 186, '2013': 180, '2301': 174, '3021': 167, '1230': 134, '1032': 102, '3012': 97, '1203': 92, '0123': 91, '0312': 89, '2031': 88, '3102': 86, '2130': 85, '0132': 84, '1023': 84, '3120': 81, '0213': 79, '2103': 76, '2310': 72, '0321': 71, '3201': 64, '3210': 60, '1320': 59})
# ({'0312': 161, '3120': 143, '0123': 137, '2130': 135, '1023': 122, '2013': 119, '2301': 117, '3102': 116, '2031': 109, '3201': 108, '3012': 105, '2103': 105, '3021': 97, '2310': 96, '1032': 94, '1320': 93, '1230': 92, '0321': 92, '3210': 87, '0213': 82, '0132': 81, '1203': 79, '0231': 75, '1302': 67})
# ({'3201': 129, '0231': 122, '3012': 121, '1023': 120, '2310': 120, '0132': 117, '0321': 115, '0123': 111, '0312': 111, '3120': 110, '2031': 106, '1203': 105, '3210': 104, '1302': 103, '1032': 101, '3102': 98, '1230': 95, '2103': 94, '2130': 94, '0213': 92, '1320': 90, '2301': 88, '2013': 86, '3021': 80})
# ({'1032': 124, '0231': 121, '0123': 113, '2310': 113, '2130': 113, '3021': 110, '2031': 110, '0321': 109, '0132': 108, '2013': 108, '0312': 108, '0213': 103, '2301': 102, '3102': 101, '1023': 100, '1203': 99, '3201': 97, '3012': 95, '1230': 94, '3210': 94, '1302': 94, '3120': 94, '1320': 93, '2103': 93})
# ({'3102': 120, '1023': 117, '2130': 113, '2301': 112, '1302': 111, '3120': 111, '1320': 110, '3012': 108, '2013': 108, '0231': 106, '2103': 105, '1032': 105, '2031': 104, '0123': 104, '3201': 104, '0312': 103, '2310': 102, '3210': 98, '0321': 98, '3021': 94, '1203': 94, '0132': 92, '0213': 91, '1230': 86})
# ({'2031': 134, '3012': 132, '3021': 120, '3201': 110, '2130': 109, '2301': 108, '1203': 106, '0321': 103, '1302': 102, '2013': 102, '2103': 102, '1023': 102, '0123': 99, '1320': 97, '3210': 95, '0213': 95, '0132': 94, '1230': 93, '0312': 92, '2310': 91, '1032': 90, '3120': 89, '3102': 85, '0231': 82})
# ({'2301': 116, '1032': 109, '3210': 106, '3012': 105, '3120': 105, '0231': 104, '0132': 104, '2310': 103, '1320': 101, '2130': 98, '0123': 98, '2031': 98, '1203': 97, '1023': 94, '2013': 94, '3201': 92, '3021': 92, '0312': 92, '3102': 91, '2103': 86, '1302': 86, '0321': 85, '0213': 78, '1230': 70})
# ({'3012': 102, '3102': 101, '1032': 99, '0213': 96, '2031': 94, '2310': 93, '1230': 91, '0231': 90, '3210': 89, '1203': 88, '1023': 87, '0123': 86, '1320': 86, '2013': 86, '2130': 86, '1302': 80, '0321': 80, '3201': 80, '2103': 79, '0132': 79, '2301': 75, '3021': 72, '3120': 67, '0312': 62})]

# 100W数据 不设阈值(第一个分段随机选择)
# 4 8 16 32 64 128 256 512
# withIndexValue = True
# ({'0231': 19446, '2013': 18664, '1302': 18551, '2301': 17600, '1230': 15893, '3021': 15829, '1032': 9300, '2103': 9271, '3102': 9193, '1203': 9139, '0312': 9022, '3012': 8639, '2031': 8392, '0132': 8191, '2310': 8006, '0123': 7912, '1023': 7789, '2130': 7710, '0213': 7174, '3201': 7118, '1320': 7076, '3120': 7058, '3210': 6538, '0321': 6493})
# ({'2130': 14042, '0312': 13548, '3120': 12287, '2013': 12038, '2031': 11736, '3102': 11728, '1023': 11702, '2301': 11078, '0123': 11018, '1032': 10221, '3201': 10124, '1320': 10063, '3210': 9820, '1230': 9745, '3021': 9706, '1203': 9640, '2103': 9259, '0213': 9258, '1302': 9121, '0321': 9008, '2310': 8863, '3012': 8815, '0231': 8779, '0132': 8409})
# ({'3012': 11921, '1023': 11769, '3201': 11535, '0132': 11128, '1203': 11039, '3102': 10932, '0231': 10837, '2031': 10751, '0321': 10440, '0312': 10437, '1230': 10215, '1032': 10203, '1302': 10186, '3210': 10133, '2103': 10133, '2013': 10002, '2310': 9964, '3021': 9903, '2301': 9891, '3120': 9809, '1320': 9772, '2130': 9713, '0213': 9663, '0123': 9640})
# ({'0132': 10911, '0213': 10829, '2310': 10704, '3021': 10667, '2013': 10646, '1023': 10629, '3012': 10609, '1032': 10605, '3201': 10418, '1203': 10397, '1302': 10389, '2031': 10384, '1320': 10378, '3120': 10366, '1230': 10346, '2130': 10338, '0231': 10291, '2301': 10276, '3210': 10276, '0321': 10275, '2103': 10154, '0312': 10095, '3102': 10034, '0123': 9999})
# ({'0321': 10612, '3210': 10565, '3012': 10565, '3120': 10530, '0123': 10524, '0231': 10514, '2301': 10489, '1302': 10489, '2310': 10487, '2130': 10475, '1230': 10461, '3201': 10455, '2013': 10449, '0132': 10409, '1032': 10407, '3102': 10372, '1320': 10339, '2031': 10329, '2103': 10328, '3021': 10311, '0312': 10300, '1203': 10229, '1023': 10192, '0213': 10153})
# ({'0231': 10610, '0213': 10601, '1203': 10560, '2130': 10520, '3021': 10517, '3120': 10512, '2031': 10443, '0123': 10438, '1032': 10436, '3012': 10436, '0132': 10432, '0321': 10431, '2310': 10423, '3102': 10405, '2301': 10404, '1230': 10354, '2103': 10347, '1023': 10343, '3201': 10340, '0312': 10329, '2013': 10324, '1320': 10314, '3210': 10303, '1302': 10162})
# ({'0132': 10570, '3120': 10551, '0231': 10521, '2301': 10509, '0321': 10478, '1230': 10474, '3102': 10473, '1302': 10469, '2130': 10461, '3012': 10459, '1032': 10444, '1203': 10439, '2031': 10431, '2013': 10395, '0123': 10393, '0213': 10385, '2310': 10357, '2103': 10353, '3201': 10353, '3021': 10294, '0312': 10277, '3210': 10277, '1320': 10256, '1023': 10237})
# ({'1320': 10565, '2130': 10556, '0213': 10542, '2031': 10539, '2301': 10511, '1203': 10496, '2310': 10444, '0231': 10442, '0312': 10437, '3210': 10427, '3021': 10399, '1023': 10393, '0321': 10390, '3102': 10386, '2103': 10381, '1230': 10381, '3120': 10377, '3201': 10373, '1032': 10340, '0132': 10335, '1302': 10328, '2013': 10322, '3012': 10299, '0123': 10193})

all_patterns = []
for segNum in range(2, 10):
    segNum = int(2 ** segNum)
    keyLen = segNum * segLen

    withIndexValue = True

    # 是否排序
    # withoutSorts = [True, False]
    withoutSorts = [False]
    # 是否添加噪声
    # addNoises = ["pca", "mul", "add", ""]
    addNoises = ["mul"]

    for addNoise in addNoises:
        for withoutSort in withoutSorts:

            # 为了使用cox-box处理，将滤波放在总循环前面，结果与old版本的有略微的不一致
            CSIa1Orig = smooth(np.array(CSIa1Orig), window_len=30, window='flat')

            CSIa1Orig = (CSIa1Orig - np.min(CSIa1Orig)) / (np.max(CSIa1Orig) - np.min(CSIa1Orig))
            CSIa1Orig = scipy.stats.boxcox(np.abs(CSIa1Orig) + 1e-4)[0]
            CSIa1Orig = normal2uniform(CSIa1Orig) * 2
            CSIa1Orig = np.array(CSIa1Orig)

            dataLen = len(CSIa1Orig)
            print("dataLen", dataLen)

            print("segLen", segLen)
            print("keyLen", keyLen / segLen)

            dataLenLoop = dataLen
            keyLenLoop = keyLen

            shuffle_patterns = []
            staInd = -keyLenLoop

            indices = list(itertools.permutations(range(4)))
            # indices_counters = dict(Counter(indices))
            indices_counters = {}

            while staInd < dataLenLoop:
                staInd += keyLenLoop
                keyLen = segNum * segLen
                endInd = staInd + keyLen
                if endInd >= len(CSIa1Orig):
                    break

                tmpCSIa1 = CSIa1Orig[range(staInd, endInd, 1)]

                # 目的是把加噪音+无排序的结果降下来
                if addNoise == "mul":
                    np.random.seed(10000)
                    randomMatrix = np.random.uniform(0, np.std(CSIa1Orig) * 4, size=(keyLen, keyLen))
                    tmpCSIa1 = tmpCSIa1 - np.mean(tmpCSIa1)
                    tmpCSIa1 = np.matmul(tmpCSIa1, randomMatrix)
                else:
                    tmpCSIa1 = tmpCSIa1 - np.mean(tmpCSIa1)

                if withIndexValue:
                    # 将测量值和其索引结合成二维数组
                    tmpCSIa1Index = np.array(tmpCSIa1).argsort().argsort()

                    # 将index和value放缩到同样的区间内
                    tmpCSIa1 = (tmpCSIa1 - np.min(tmpCSIa1)) / (np.max(tmpCSIa1) - np.min(tmpCSIa1))
                    tmpCSIa1Index = (tmpCSIa1Index - np.min(tmpCSIa1Index)) / (np.max(tmpCSIa1Index) - np.min(tmpCSIa1Index))
                    tmpCSIa1Ind = np.array(list(zip(tmpCSIa1, tmpCSIa1Index)))
                else:
                    if withoutSort:
                        tmpCSIa1Ind = np.array(tmpCSIa1)
                    else:
                        tmpCSIa1Ind = np.array(tmpCSIa1).argsort().argsort()

                # 滑动窗口分段
                if withIndexValue:
                    threshold = 1
                else:
                    if withoutSort:
                        threshold = 0.2
                    else:
                        threshold = 15
                # shuffle_method_ori = find_sub_opt_shuffle_method_sliding_threshold(
                #     tmpCSIa1Ind, tmpCSIa1Ind, 4, indices, threshold)
                # shuffle_method_ori = find_sub_opt_shuffle_method_sliding_threshold_random(
                #     tmpCSIa1Ind, tmpCSIa1Ind, 4, indices, threshold)
                shuffle_method_ori, indices_counters = find_sub_opt_shuffle_method_sliding_threshold_even(
                    tmpCSIa1Ind, tmpCSIa1Ind, 4, indices, indices_counters, threshold)
                # indices_counters = dict(sorted(indices_counters.items(), key=lambda x: x[1], reverse=True))
                # print(staInd, indices_counters)
                # tmpCSIb1Ind = np.random.normal(np.mean(tmpCSIa1Ind), np.std(tmpCSIa1Ind), tmpCSIa1Ind.shape)
                # shuffle_method_ori = find_sub_opt_shuffle_method_sliding_threshold_random(
                #     tmpCSIa1Ind, tmpCSIb1Ind, 4, indices, threshold)

                for index in shuffle_method_ori:
                    shuffle_patterns.append("".join(np.array(index).astype(str)))

            print("shuffle patterns", Counter(shuffle_patterns))
            all_patterns.append(Counter(shuffle_patterns))
            print("\n")
print(all_patterns)