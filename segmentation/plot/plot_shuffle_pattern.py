import itertools
import matplotlib.pyplot as plt
import numpy as np

# 理论上的分段数据
all_theoretical_segments = list(itertools.permutations(range(4)))

# 实验结果的分段数据 不设阈值(第一个分段随机选择)
# all_experimental_segments = [
#     {'0231': 203, '1302': 186, '2013': 180, '2301': 174, '3021': 167, '1230': 134, '1032': 102,
#      '3012': 97, '1203': 92, '0123': 91, '0312': 89, '2031': 88, '3102': 86, '2130': 85,
#      '0132': 84, '1023': 84, '3120': 81, '0213': 79, '2103': 76, '2310': 72, '0321': 71,
#      '3201': 64, '3210': 60, '1320': 59},
#     {'0312': 161, '3120': 143, '0123': 137, '2130': 135, '1023': 122, '2013': 119, '2301': 117,
#      '3102': 116, '2031': 109, '3201': 108, '3012': 105, '2103': 105, '3021': 97, '2310': 96,
#      '1032': 94, '1320': 93, '1230': 92, '0321': 92, '3210': 87, '0213': 82, '0132': 81,
#      '1203': 79, '0231': 75, '1302': 67},
#     {'3201': 129, '0231': 122, '3012': 121, '1023': 120, '2310': 120, '0132': 117, '0321': 115,
#      '0123': 111, '0312': 111, '3120': 110, '2031': 106, '1203': 105, '3210': 104, '1302': 103,
#      '1032': 101, '3102': 98, '1230': 95, '2103': 94, '2130': 94, '0213': 92, '1320': 90,
#      '2301': 88, '2013': 86, '3021': 80},
#     {'1032': 124, '0231': 121, '0123': 113, '2310': 113, '2130': 113, '3021': 110, '2031': 110,
#      '0321': 109, '0132': 108, '2013': 108, '0312': 108, '0213': 103, '2301': 102, '3102': 101,
#      '1023': 100, '1203': 99, '3201': 97, '3012': 95, '1230': 94, '3210': 94, '1302': 94,
#      '3120': 94, '1320': 93, '2103': 93},
#     {'3102': 120, '1023': 117, '2130': 113, '2301': 112, '1302': 111, '3120': 111, '1320': 110,
#      '3012': 108, '2013': 108, '0231': 106, '2103': 105, '1032': 105, '2031': 104, '0123': 104,
#      '3201': 104, '0312': 103, '2310': 102, '3210': 98, '0321': 98, '3021': 94, '1203': 94,
#      '0132': 92, '0213': 91, '1230': 86},
#     {'2031': 134, '3012': 132, '3021': 120, '3201': 110, '2130': 109, '2301': 108, '1203': 106,
#      '0321': 103, '1302': 102, '2013': 102, '2103': 102, '1023': 102, '0123': 99, '1320': 97,
#      '3210': 95, '0213': 95, '0132': 94, '1230': 93, '0312': 92, '2310': 91, '1032': 90,
#      '3120': 89, '3102': 85, '0231': 82},
#     {'2301': 116, '1032': 109, '3210': 106, '3012': 105, '3120': 105, '0231': 104, '0132': 104,
#      '2310': 103, '1320': 101, '2130': 98, '0123': 98, '2031': 98, '1203': 97, '1023': 94,
#      '2013': 94, '3201': 92, '3021': 92, '0312': 92, '3102': 91, '2103': 86, '1302': 86,
#      '0321': 85, '0213': 78, '1230': 70},
#     {'3012': 102, '3102': 101, '1032': 99, '0213': 96, '2031': 94, '2310': 93, '1230': 91,
#      '0231': 90, '3210': 89, '1203': 88, '1023': 87, '0123': 86, '1320': 86, '2013': 86,
#      '2130': 86, '1302': 80, '0321': 80, '3201': 80, '2103': 79, '0132': 79, '2301': 75,
#      '3021': 72, '3120': 67, '0312': 62}]

# # 100W数据 不设阈值(第一个分段随机选择)
# all_experimental_segments = [
#     ({'0231': 19446, '2013': 18664, '1302': 18551, '2301': 17600, '1230': 15893, '3021': 15829,
#       '1032': 9300, '2103': 9271, '3102': 9193, '1203': 9139, '0312': 9022, '3012': 8639,
#       '2031': 8392, '0132': 8191, '2310': 8006, '0123': 7912, '1023': 7789, '2130': 7710,
#       '0213': 7174, '3201': 7118, '1320': 7076, '3120': 7058, '3210': 6538, '0321': 6493}),
#     ({'2130': 14042, '0312': 13548, '3120': 12287, '2013': 12038, '2031': 11736, '3102': 11728,
#       '1023': 11702, '2301': 11078, '0123': 11018, '1032': 10221, '3201': 10124, '1320': 10063,
#       '3210': 9820, '1230': 9745, '3021': 9706, '1203': 9640, '2103': 9259, '0213': 9258,
#       '1302': 9121, '0321': 9008, '2310': 8863, '3012': 8815, '0231': 8779, '0132': 8409}),
#     ({'3012': 11921, '1023': 11769, '3201': 11535, '0132': 11128, '1203': 11039, '3102': 10932,
#       '0231': 10837, '2031': 10751, '0321': 10440, '0312': 10437, '1230': 10215, '1032': 10203,
#       '1302': 10186, '3210': 10133, '2103': 10133, '2013': 10002, '2310': 9964, '3021': 9903,
#       '2301': 9891, '3120': 9809, '1320': 9772, '2130': 9713, '0213': 9663, '0123': 9640}),
#     ({'0132': 10911, '0213': 10829, '2310': 10704, '3021': 10667, '2013': 10646, '1023': 10629,
#       '3012': 10609, '1032': 10605, '3201': 10418, '1203': 10397, '1302': 10389, '2031': 10384,
#       '1320': 10378, '3120': 10366, '1230': 10346, '2130': 10338, '0231': 10291, '2301': 10276,
#       '3210': 10276, '0321': 10275, '2103': 10154, '0312': 10095, '3102': 10034,
#       '0123': 9999}),
#     ({'0321': 10612, '3210': 10565, '3012': 10565, '3120': 10530, '0123': 10524, '0231': 10514,
#       '2301': 10489, '1302': 10489, '2310': 10487, '2130': 10475, '1230': 10461, '3201': 10455,
#       '2013': 10449, '0132': 10409, '1032': 10407, '3102': 10372, '1320': 10339, '2031': 10329,
#       '2103': 10328, '3021': 10311, '0312': 10300, '1203': 10229, '1023': 10192,
#       '0213': 10153}),
#     ({'0231': 10610, '0213': 10601, '1203': 10560, '2130': 10520, '3021': 10517, '3120': 10512,
#       '2031': 10443, '0123': 10438, '1032': 10436, '3012': 10436, '0132': 10432, '0321': 10431,
#       '2310': 10423, '3102': 10405, '2301': 10404, '1230': 10354, '2103': 10347, '1023': 10343,
#       '3201': 10340, '0312': 10329, '2013': 10324, '1320': 10314, '3210': 10303,
#       '1302': 10162}),
#     ({'0132': 10570, '3120': 10551, '0231': 10521, '2301': 10509, '0321': 10478, '1230': 10474, '3102': 10473,
#       '1302': 10469, '2130': 10461, '3012': 10459, '1032': 10444, '1203': 10439, '2031': 10431, '2013': 10395,
#       '0123': 10393, '0213': 10385, '2310': 10357, '2103': 10353, '3201': 10353, '3021': 10294, '0312': 10277,
#       '3210': 10277, '1320': 10256, '1023': 10237}),
#     ({'1320': 10565, '2130': 10556, '0213': 10542, '2031': 10539, '2301': 10511, '1203': 10496, '2310': 10444,
#       '0231': 10442, '0312': 10437, '3210': 10427, '3021': 10399, '1023': 10393, '0321': 10390, '3102': 10386,
#       '2103': 10381, '1230': 10381, '3120': 10377, '3201': 10373, '1032': 10340, '0132': 10335, '1302': 10328,
#       '2013': 10322, '3012': 10299, '0123': 10193})
# ]

# 1W数据 设阈值 第一个分段随机 置换类型随机(find_sub_opt_shuffle_method_sliding_threshold_random)
# all_experimental_segments = [
#     ({'3201': 264, '3102': 205, '0231': 196, '3120': 193, '2013': 181, '0123': 149, '2301': 119, '3021': 118,
#       '1302': 117, '0132': 112, '1230': 104, '2130': 93, '0312': 76, '2103': 73, '0321': 69, '1203': 66, '2031': 56,
#       '1032': 49, '0213': 48, '3210': 47, '1320': 46, '1023': 45, '3012': 42, '2310': 36}),
#     ({'0132': 489, '0123': 467, '3102': 231, '0312': 177, '3201': 159, '3120': 147, '2103': 126, '2130': 95, '2013': 69,
#       '2310': 68, '2031': 64, '3210': 60, '2301': 59, '1320': 42, '1023': 40, '0213': 38, '1203': 34, '0231': 34,
#       '3012': 28, '1032': 23, '0321': 21, '3021': 16, '1230': 14, '1302': 11}),
#     ({'0132': 638, '0123': 617, '0312': 323, '3102': 299, '3201': 103, '2310': 84, '2103': 59, '0231': 42, '3012': 41,
#       '1023': 39, '2013': 33, '0321': 32, '3120': 29, '1203': 23, '2031': 22, '2130': 21, '1302': 20, '1032': 17,
#       '1230': 14, '3021': 13, '0213': 12, '1320': 11, '2301': 10, '3210': 10}),
#     ({'0132': 810, '0123': 794, '0312': 306, '3102': 292, '2103': 46, '3201': 36, '2310': 35, '2013': 21, '3120': 18,
#       '1032': 14, '0231': 14, '2301': 13, '3021': 13, '0213': 12, '1023': 11, '3210': 11, '2130': 11, '2031': 8,
#       '1320': 7, '3012': 7, '0321': 6, '1302': 4, '1203': 4, '1230': 3}),
#     ({'0132': 878, '0123': 851, '3102': 316, '0312': 298, '2103': 31, '2310': 27, '3201': 18, '3120': 14, '1203': 6,
#       '0321': 6, '1320': 6, '2013': 6, '2031': 5, '2130': 5, '1302': 5, '0213': 4, '1023': 4, '2301': 4, '1230': 3,
#       '3210': 3, '0231': 3, '3021': 1, '1032': 1, '3012': 1}),
#     ({'0123': 886, '0132': 822, '0312': 327, '3102': 307, '2310': 28, '2103': 22, '3201': 6, '2013': 6, '0213': 5,
#       '2130': 4, '3120': 3, '3012': 3, '0321': 2, '0231': 2, '1230': 2, '1032': 1, '1302': 1, '1320': 1, '2031': 1,
#       '3210': 1, '2301': 1, '1203': 1}),
#     ({'0132': 867, '0123': 864, '3102': 258, '0312': 252, '2310': 26, '2103': 19, '3201': 5, '2130': 4, '0231': 3,
#       '2301': 2, '2013': 1, '1203': 1, '1023': 1, '3120': 1}),
#     ({'0132': 755, '0123': 754, '0312': 272, '3102': 235, '2310': 13, '2103': 11, '3012': 2, '3201': 2, '3120': 1,
#       '2130': 1, '1320': 1, '1023': 1})
# ]

# 1W数据 设阈值 第一个分段随机 置换类型均匀随机选择(find_sub_opt_shuffle_method_sliding_threshold_even)
all_experimental_segments = [
    ({'2310': 105, '3201': 105, '2130': 105, '1203': 105, '3210': 105, '2031': 105, '2103': 105,
      '3021': 105, '1230': 104, '0321': 104, '2013': 104, '0132': 104, '3102': 104, '0231': 104,
      '3012': 104, '1302': 104, '0123': 104, '2301': 104, '0213': 104, '0312': 104, '3120': 104,
      '1032': 104, '1023': 104, '1320': 104}),
    ({'2310': 106, '3201': 106, '0132': 106, '1023': 106, '1032': 106, '3210': 106, '3102': 106,
      '1302': 106, '0321': 105, '1203': 105, '2103': 105, '1230': 105, '3021': 104, '0231': 104,
      '0213': 104, '2130': 104, '3012': 104, '2301': 104, '2031': 104, '2013': 104, '3120': 103,
      '1320': 103, '0312': 103, '0123': 103}),
    ({'1203': 111, '2310': 110, '0213': 110, '2130': 110, '2103': 109, '2301': 108, '3210': 108,
      '3021': 108, '0132': 106, '1320': 105, '3102': 104, '2013': 104, '0123': 104, '3120': 104,
      '1230': 103, '0321': 103, '3201': 102, '1032': 102, '0231': 102, '2031': 101, '0312': 101,
      '3012': 99, '1023': 99, '1302': 99}),
    ({'1032': 119, '1230': 118, '2130': 118, '3012': 118, '3210': 118, '2301': 117, '3201': 116,
      '0123': 115, '3120': 114, '0213': 102, '2310': 101, '0231': 99, '0312': 99, '0321': 98,
      '2103': 97, '3102': 97, '3021': 95, '2031': 95, '1302': 95, '0132': 94, '1203': 94,
      '1320': 93, '2013': 92, '1023': 92}),
    ({'3102': 126, '1032': 126, '0123': 126, '0321': 125, '1230': 125, '3021': 125, '1302': 125,
      '1023': 124, '0312': 124, '1320': 124, '2031': 123, '3210': 123, '2301': 123, '2013': 123,
      '0231': 121, '2310': 104, '3120': 70, '2103': 67, '0213': 66, '1203': 66, '2130': 65,
      '0132': 65, '3012': 65, '3201': 65}),
    ({'2031': 251, '0213': 251, '2310': 145, '0231': 130, '0132': 129, '1023': 128, '3102': 128,
      '1302': 128, '1203': 128, '3021': 128, '3201': 127, '1230': 127, '2130': 127, '0123': 127,
      '1320': 127, '3210': 126, '2013': 125}),
    ({'2310': 256, '2103': 256, '0132': 255, '0321': 255, '2301': 254, '1023': 254, '2031': 254,
      '3210': 253, '3012': 253, '3201': 10, '0312': 2, '0231': 2}),
    ({'2310': 512, '3120': 511, '0321': 509, '1032': 509, '3201': 3, '0231': 2, '1023': 2})]

for i in range(len(all_experimental_segments)):
    # 计算总分段个数
    total_experimental = 0
    for counter in all_experimental_segments[i]:
        total_experimental += all_experimental_segments[i][counter]

    total_theoretical = len(all_theoretical_segments)

    # 计算每种分段个数占总分段个数的比值
    theoretical_ratios = {''.join(np.array(key).astype(str)): 1 / total_theoretical for key in all_theoretical_segments}
    experimental_ratios = {key: value / total_experimental for key, value in all_experimental_segments[i].items()}

    # 按键排序
    theoretical_ratios = dict(sorted(theoretical_ratios.items(), key=lambda x: x[0]))
    experimental_ratios = dict(sorted(experimental_ratios.items(), key=lambda x: x[0]))

    # 提取数据用于绘图
    theoretical_labels = list(theoretical_ratios.keys())
    theoretical_sizes = list(theoretical_ratios.values())

    experimental_labels = list(experimental_ratios.keys())
    experimental_sizes = list(experimental_ratios.values())

    # 绘制理论分段比例的柱状图
    plt.figure(figsize=(14, 7))

    plt.subplot(1, 2, 1)
    plt.bar(theoretical_labels, theoretical_sizes, color='blue')
    plt.xlabel('Shuffle Pattern')
    plt.ylabel('Proportion')
    # 横坐标标签旋转45度
    plt.xticks(rotation=45)
    plt.ylim([0, 0.08])
    plt.title('Theoretical Shuffle Pattern Proportions 4 * ' + str(2 ** (2 + i)))

    # 绘制实验分段比例的柱状图
    plt.subplot(1, 2, 2)
    plt.bar(experimental_labels, experimental_sizes, color='orange')
    plt.xlabel('Shuffle Pattern')
    plt.ylabel('Proportion')
    # 横坐标标签旋转45度
    plt.xticks(rotation=45)
    plt.ylim([0, 0.08])
    plt.title('Experimental Shuffle Pattern Proportions 4 * ' + str(2 ** (2 + i)))

    # 显示图表
    plt.tight_layout()
    # plt.savefig('shuffle_pattern_proportions_4_' + str(2 ** (2 + i)) + '.svg', dpi=1200, bbox_inches='tight')

    plt.show()
