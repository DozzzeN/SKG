import numpy as np
from dtw import dtw
from scipy.spatial.distance import cosine
from scipy.stats import pearsonr


def genArray(list):
    res = []
    for i in range(len(list)):
        tmp = 0
        for j in range(len(list[i])):
            tmp += list[i][j]
        res.append(tmp)
    return res


# # 等间隔选取ratio个点
# def genSample(list, ratio):
#     res = []
#     selected = 0
#     for i in range(len(list)):
#         for j in range(len(list[i])):
#             selected += 1
#     selected = int(selected * ratio)
#     s = 0
#     t = 0
#     for i in range(len(list)):
#         tmp = 0
#         for j in range(len(list[i])):
#             t += 1
#             if selected == 0:
#                 break
#             if j % int(1 / ratio) == 0:
#                 tmp += list[i][j]
#                 s += 1
#                 selected -= 1
#         res.append(tmp)
#     return res


# 等间隔选取selected个点
def genSample(list, ratio):
    selected = int(ratio * len(list[0]))
    print("从", len(list[0]), "中选", selected)
    res = []
    for i in range(len(list)):
        tmp = 0
        if selected >= len(list[i]):
            tmp += sum(list[i])
        else:
            for j in range(selected):
                tmp += list[i][j]
        res.append(tmp)
    return res


# a = [
#     [-66.86385, -67.37052, -66.86385, -67.86385],
#     [-68.26385, -69.31719, -66.67719, -65.74385],
#     [-64.90385, -66.31719, -65.66385, -64.82385],
#     [-63.33052, -63.86385, -66.11719, -68.23719],
#     [-68.79719, -68.14385, -67.43719, -67.70385],
#     [-66.86385, -66.86385, -66.67719, -65.71719],
#     [-64.82385, -64.79719, -66.25052, -66.65052],
#     [-65.49052, -63.87719, -63.01052, -63.59719],
#     [-64.59719, -66.17052, -66.18385, -67.31719],
#     [-66.82385, -67.54385, -65.78385, -65.97052],
#     [-64.62385, -65.41052, -64.47719, -64.85052],
#     [-65.81052, -67.50385, -68.41052, -66.63719],
#     [-65.75719, -66.43719, -66.98385, -65.81052],
#     [-65.70385, -66.87719, -68.33052, -66.61052],
#     [-67.75719, -68.94385, -70.25052, -68.73052],
#     [-68.49052, -69.98385, -71.47719, -70.46385],
#     [-67.42385, -66.22385, -66.34385, -67.89052],
#     [-66.89052, -66.87719, -67.18385, -67.29052],
#     [-66.82385, -65.39719, -65.29052, -67.05052],
#     [-69.74385, -70.39719, -67.99719, -66.30385],
#     [-66.78385, -67.83719, -67.87719, -66.35719],
#     [-65.57052, -64.54385, -65.94385, -66.61052],
#     [-68.73052, -68.06385, -69.57052, -69.01052],
#     [-69.54385, -67.70385, -66.91719, -65.19719],
#     [-64.18385, -63.61052, -62.70385, -62.43719],
#     [-62.31719, -64.71719, -65.75719, -66.87719],
#     [-67.11719, -68.27719, -67.51719, -66.86385],
#     [-65.54385, -65.26385, -64.35719, -64.75719],
#     [-64.81052, -65.75719, -65.38385, -65.69052],
#     [-64.91719, -65.54385, -65.58385, -65.63719],
#     [-64.33052, -64.98385, -65.23719, -65.61052],
#     [-64.35719, -63.83719, -63.42385, -64.23719],
# ]

# mul noise
a = [
    [41.84889, 27.76781, 93.96150, 47.37516, 114.45943, 64.92172, 63.04561, 121.05165],
    [105.47352, 51.90095, 77.99996, 75.19883, 58.26318, 100.36079, 100.40953, 64.53143],
    [96.25061, 15.90464, 49.97093, 63.08016, 86.43805, 94.10438, 42.91387, 119.24042],
    [41.56463, 54.20832, 85.08684, -19.38369, 98.08325, 140.68963, 95.16351, 41.89139],
    [91.85035, 87.15760, 82.48128, 65.04272, 72.29695, 97.74835, 40.60526, 77.64388],
    [84.08710, 62.94007, 42.10331, 0.91035, 112.47165, 28.94859, 63.63791, 45.05598],
    [55.90744, 54.27139, 67.13983, 34.16563, 59.47258, -4.62184, 63.04034, 95.58385],
    [68.19048, 101.37411, 43.90105, 54.90471, 52.12978, 44.10185, 117.61041, 73.94832],
    [93.03882, 35.27753, 33.81545, 91.09685, -5.44990, 50.53857, 102.26303, 69.10856],
    [111.42916, 109.18014, 52.73678, 47.81179, 32.24657, 112.81179, 21.82656, 27.61429],
    [100.93132, 68.59480, 54.28045, 73.56922, -5.19692, 119.83320, 48.92471, 70.36673],
    [67.50117, 90.67522, 129.61142, 62.79154, 126.68087, 54.59694, 87.35002, 68.70735],
    [99.41108, 67.97432, 51.52742, 95.31046, 84.24749, 56.60853, 35.16513, 25.19537],
    [60.51053, 148.22558, 84.61786, 42.01974, 97.31839, 73.22125, 41.58546, 104.49555],
    [55.67354, 42.73884, 105.84896, 92.34985, 61.85212, 74.25349, -11.88351, 48.10596],
    [117.81353, 62.05750, -1.63840, 111.63285, 91.35278, 59.70119, 70.48220, 76.07412],
]

b = [
    [41.90924, 27.79083, 94.21127, 47.62280, 115.03003, 65.02062, 62.93753, 120.95852],
    [105.52034, 52.25128, 78.43159, 75.53237, 58.53189, 100.76730, 100.74558, 64.62089],
    [96.39924, 15.92188, 50.21037, 63.36192, 86.86648, 94.42482, 43.10008, 119.69896],
    [41.64433, 54.34018, 85.21769, -19.38320, 98.13996, 140.71032, 95.25981, 41.94093],
    [91.92346, 87.32565, 82.52427, 64.97744, 72.12531, 97.66150, 40.53883, 77.50436],
    [83.73437, 62.78419, 41.99961, 0.93542, 112.07370, 28.83398, 63.45359, 45.05750],
    [55.95323, 54.25810, 67.08469, 34.14083, 59.53485, -4.61691, 62.87938, 95.23323],
    [68.05766, 101.28573, 43.94128, 54.93242, 52.06387, 44.02097, 117.30235, 73.82208],
    [92.81357, 35.19373, 33.71446, 90.88513, -5.44216, 50.43640, 101.98800, 68.88400],
    [111.14944, 108.95717, 52.69243, 47.79183, 32.24724, 113.03096, 21.83527, 27.68782],
    [101.03807, 68.57562, 54.23037, 73.53848, -5.19872, 119.60704, 48.93919, 70.59204],
    [67.74942, 90.82681, 129.50054, 62.94621, 127.01037, 54.73774, 87.16390, 68.45706],
    [99.08973, 67.81814, 51.51849, 95.34536, 84.39830, 56.81609, 35.26354, 25.30225],
    [60.54658, 148.20854, 84.60662, 42.00063, 97.26682, 73.14096, 41.59700, 104.50968],
    [55.66670, 42.75043, 105.95481, 92.30111, 61.68411, 73.90937, -11.84089, 47.95267],
    [117.51129, 61.85574, -1.62591, 111.25857, 91.00361, 59.48569, 70.25017, 75.79869],
]

e = [
    [38.38518, 25.74613, 87.18328, 44.67514, 107.68313, 61.14095, 60.46736, 117.86923],
    [103.58021, 51.35494, 77.15206, 74.51011, 56.27738, 94.40971, 92.00881, 57.61619],
    [86.82143, 14.53839, 46.93997, 58.22437, 80.14432, 85.01790, 39.60175, 110.47762],
    [39.58868, 52.33434, 82.84289, -18.85166, 96.46822, 136.50557, 90.39156, 39.55046],
    [85.53208, 80.96093, 76.31756, 61.14445, 69.32536, 96.66305, 40.79212, 78.02314],
    [83.40464, 60.52142, 39.71821, 0.77263, 108.57108, 28.31771, 61.01711, 42.38484],
    [52.86214, 52.03819, 64.87666, 32.97426, 56.53300, -4.45452, 58.56532, 88.28662],
    [63.18361, 93.71917, 40.22297, 50.02596, 48.14936, 41.36059, 109.53514, 68.94373],
    [86.48573, 33.17306, 32.17934, 86.10467, -4.97471, 46.63264, 94.58190, 64.06340],
    [105.36687, 102.56917, 49.55033, 44.36535, 30.00261, 104.74118, 20.11412, 25.32642],
    [92.57965, 62.91581, 50.18340, 68.15881, -4.73595, 112.22953, 46.62470, 67.98276],
    [64.93716, 85.55120, 121.81145, 59.22058, 120.15290, 53.13185, 87.62908, 69.07996],
    [98.92653, 66.25648, 50.99628, 96.21006, 86.25166, 58.14706, 35.06812, 24.27845],
    [57.94504, 144.56176, 84.83032, 42.87226, 99.01586, 74.45338, 41.86639, 106.05773],
    [56.29365, 43.18324, 107.27487, 93.17119, 62.12250, 73.93175, -11.74382, 47.66894],
    [117.09316, 62.72205, -1.60130, 112.87662, 91.23529, 59.58531, 70.38882, 75.76757],
]
# print(genSample(a, 0.75))
# print(genArray(a))
# print(pearsonr([2, 1], [-2, 1])[0])
# print(pearsonr([1, 1], [-1, 1])[0])
# print(cosine([2, 1], [-2, 1]))
# print(cosine([1, 1], [-1, 1]))
print(pearsonr(a[0], b[0])[0])
print(pearsonr(a[0], e[0])[0])

# print(pearsonr(a[0], a[1])[0])
# print(pearsonr(a[0], a[2])[0])
# print(pearsonr(b[0], b[1])[0])
# print(pearsonr(b[0], b[2])[0])
# print(pearsonr(e[0], e[1])[0])
# print(pearsonr(e[0], e[2])[0])

print("cosine")
print(cosine(a[0][0:2], a[0][2:4]))
print(cosine(a[0][4:6], a[0][6:8]))
print(cosine(b[0][0:2], b[0][2:4]))
print(cosine(b[0][4:6], b[0][6:8]))
print(cosine(e[0][0:2], e[0][2:4]))
print(cosine(e[0][4:6], e[0][6:8]))


print("pearsonr")
print(pearsonr(a[0][0:2], a[0][2:4])[0])
print(pearsonr(a[0][4:6], a[0][6:8])[0])
print(pearsonr(b[0][0:2], b[0][2:4])[0])
print(pearsonr(b[0][4:6], b[0][6:8])[0])
print(pearsonr(e[0][0:2], e[0][2:4])[0])
print(pearsonr(e[0][4:6], e[0][6:8])[0])

print("dtw")
manhattan_distance = lambda x, y: np.abs(x - y)
print(dtw(a[0][0:2], a[0][2:4], dist=manhattan_distance)[0])
print(dtw(a[0][4:6], a[0][6:8], dist=manhattan_distance)[0])
print(dtw(b[0][0:2], b[0][2:4], dist=manhattan_distance)[0])
print(dtw(b[0][4:6], b[0][6:8], dist=manhattan_distance)[0])
print(dtw(e[0][0:2], e[0][2:4], dist=manhattan_distance)[0])
print(dtw(e[0][4:6], e[0][6:8], dist=manhattan_distance)[0])