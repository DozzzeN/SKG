import math

import numpy as np
from dtw import accelerated_dtw
from scipy.special import rel_entr
from scipy.stats import entropy


def fast_entropy(labels, base=None):
    value, counts = np.unique(labels, return_counts=True)
    return entropy(counts, base=base)


def kl(data1, data2):
    count1 = list(np.unique(data1, return_counts=True)[1])
    count2 = list(np.unique(data2, return_counts=True)[1])

    if len(count1) > len(count2):
        for i in range(len(count1) - len(count2)):
            count2.append(count1[i])
    elif len(count2) > len(count1):
        for i in range(len(count2) - len(count1)):
            count1.append(count2[i])

    return sum(rel_entr(count1, count2))


def dtw_metric(data1, data2):
    distance = lambda x, y: np.abs(x - y)
    # return dtw(data1, data2, dist=distance)[0]
    data1 = np.array(data1)
    data2 = np.array(data2)
    return accelerated_dtw(data1, data2, dist=distance)[0]


a = [1, 2, 1, 0, 1, 1, 2, 3]
b = [1.1, 2.2, -11.1, 10, 1.1, 1.1, 2.2, 3.3]
e = [2, -3, 4, 14, 3, 4, 0, 2]
c = [21, 32, 1, 421, 1, 23, 1, 2]
print(fast_entropy(a), fast_entropy(b))  # equal
print(kl(a, b), kl(a, c), kl(b, c))
print("dtw")
print(dtw_metric(a, c), dtw_metric(b, c), dtw_metric(e, c))
print(dtw_metric(a[0:4], c[0:4]), dtw_metric(b[0:4], c[0:4]), dtw_metric(e[0:4], c[0:4]))
print(dtw_metric(a[0:2], c[0:2]), dtw_metric(b[0:2], c[0:2]), dtw_metric(e[0:2], c[0:2]))
print(dtw_metric(a[0:1], c[0:1]), dtw_metric(b[0:1], c[0:1]), dtw_metric(e[0:1], c[0:1]))
print(dtw_metric(a[1:2], c[1:2]), dtw_metric(b[1:2], c[1:2]), dtw_metric(e[1:2], c[1:2]))
# print(entropy([1, 2, 3]), entropy([0, 1, 2, 3])) # equal
# print(pearsonr([0.02270833, 0.02270833, 0.02270833, 0.02270833],
#                [-125.32, -126.28, -350.10314426893916, -284.07432489926515])[0])
# print(pearsonr([-1.24946667e+02, -1.24306667e+02, 2.27083333e-02, 2.27083333e-02],
#                [-195.2061805674859, 14.98450743504143, -124.21333333333331, -124.10666666666665])[0])

el = [-10.462863129359418, 3.079561977775708, -16.981335627165123, -10.959110033576055, -4.416501039737841,
      2.258786112315093, 1.434986106557929, -5.194066788776911, -9.142636461133547, -7.6314928114193,
      -9.472140670413616, -15.9997660331196, -4.301483368924184, 9.16089759000397, 19.32916289104668,
      18.228658425193384, 18.349714804607704, 17.54673434641232, -10.462863129359418, 3.079561977775708,
      -16.981335627165123, -10.959110033576055, -4.416501039737841, 2.258786112315093, 1.434986106557929,
      -5.194066788776911, -9.142636461133547, -7.6314928114193, -9.472140670413616, -15.9997660331196,
      -4.301483368924184, 9.16089759000397]

nl = [-1977.38257684539, -1094.8709813932103, 103.80013108131178, 1774.5912487758821, -2870.748470572504,
      -1459.1693825407938, -2074.328789679071, 41.06805486245133, -552.9043239251662, -346.01812465296973,
      -946.7121575798383, -1164.7070366831651, -936.1274722350596, -1008.1227278373758, -2383.9988471758584,
      -3212.8403640860784, 159.84706467206834, -664.9543865873613, -1977.38257684539, -1094.8709813932103,
      103.80013108131178, 1774.5912487758821, -2870.748470572504, -1459.1693825407938, -2074.328789679071,
      41.06805486245133, -552.9043239251662, -346.01812465296973, -946.7121575798383, -1164.7070366831651,
      -936.1274722350596, -1008.1227278373758]

met = [3064.8702570870164, 1906.3318255179352, 4327.760138185875, 2122.0258974368576, 882.1483193055831,
       2085.94728755947, 1949.1096142935153, 5634.397032578177, 823.9984708012344, 3064.8702570870164,
       1906.3318255179352, 4327.760138185875, 2122.0258974368576, 882.1483193055831, 2085.94728755947,
       1949.1096142935153]

# np.random.shuffle(nl)

print(el[0:2], nl[0:2])
print(dtw_metric(el[0:2], nl[0:2]))
print(el[18:20], nl[18:20])
print(dtw_metric(el[18:20], nl[18:20]))

print((-10.462863129359418 + 1977.38257684539) + (3.079561977775708 + 1094.870981393210))
print(math.sqrt(
    math.pow((-10.462863129359418 + 1977.38257684539), 2) + math.pow((3.079561977775708 + 1094.870981393210), 2)))
